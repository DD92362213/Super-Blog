
        <h2>1234</h2>
                    ﻿<div>软件危机的表现：<div style="font-size: 18px;"><div style="font-size: 18px;">1、 软件成本日益增长&nbsp;</div><div style="font-size: 18px;">2、开发进度难以控制</div><div style="font-size: 18px;">3、软件质量差</div><div style="font-size: 18px;">4、软件维护困难</div></div><div style="font-size: 18px;"><br></div><div style="font-size: 18px;"><br></div><div style="font-size: 18px;">软件危机的原因：</div><div style="font-size: 18px;"><div style="font-size: 18px;">1、用户需求不明确&nbsp;</div><div style="font-size: 18px;"><span style="text-indent: 2em;">2、缺乏正确的理论指导</span></div><div style="font-size: 18px;"><span style="text-indent: 2em;">3、软件规模越来越大</span><br></div><div style="font-size: 18px;"><span style="text-indent: 2em;">4、软件复杂度越来越高</span><br></div></div><div style="font-size: 18px;"><span style="text-indent: 2em;"><br></span></div><div style="font-size: 18px;"><span style="text-indent: 2em;">软件体系结构的意义：</span></div><div style="font-size: 18px;"><span style="text-indent: 2em;">1、</span><span style="text-indent: 2em;">体系结构是风险承担者进行交流的手段。</span></div><div style="font-size: 18px;"><span style="text-indent: 2em;">2、</span><span style="text-indent: 2em;">体系结构是早期设计决策的体现 。</span></div><div style="font-size: 18px;"><span style="text-indent: 2em;">3、</span><span style="text-indent: 2em;">软件体系结构是可传递和可重用的模型。</span></div><div style="font-size: 18px;"><span style="text-indent: 2em;"><br></span></div><div style="font-size: 18px;">基于软件体系结构的软件设计：</div><div style="font-size: 18px;">问题定义—&gt;软件需求—&gt;软件体系结构—&gt;软件设计—&gt;软件实现<br></div><div style="font-size: 18px;"><br></div><div style="font-size: 18px;">软件生命周期</div><div style="">问题的定义及规划=&gt;需求分析=&gt;软件设计=&gt;程序编码=&gt;软件测试=&gt;运行维护<br></div><div style="font-size: 18px;"><br></div><div style="font-size: 18px;">软件体系结构建模：</div><div style="font-size: 18px;">1、结构模型</div><div style="font-size: 18px;">2、框架模型</div><div style="font-size: 18px;">3、动态模型</div><div style="font-size: 18px;">4、功能模型</div><div style="font-size: 18px;">5、过程模型</div><div style="font-size: 18px;">结构模型：这种方法以体系结构的构件、连接件和其他概念来刻画结构。</div><div style="font-size: 18px;">框架模型：<span style="text-indent: 2em;">框架模型主要以一些特殊的问题为目标建立只针对和适应该问题的结构。更侧重于整体。</span></div><div style="font-size: 18px;"><span style="text-indent: 2em;">动态模型：</span><span style="text-indent: 2em;">动态模型是对结构或框架模型的补充，研究系统的“大颗粒”的行为性质。例如，描述系统的重新配置或演化。</span></div><div style="font-size: 18px;"><span style="text-indent: 2em;">功能模型：一种特殊的动态模型。</span></div><div style="font-size: 18px;"><span style="text-indent: 2em;"><br></span></div><div style="font-size: 18px;">“4+1”模型：</div><div style="font-size: 18px;">“4+1”视图模型从5个不同的视角包括 “逻辑视图”、“进程视图”、“物理视图”、“开发视图”和“场景视图”来描述软件体系结构。<br></div><div style="font-size: 18px;">逻辑视图：逻辑视图主要支持系统的功能需求，即系统提供给最终用户的服务</div><div style="font-size: 18px;">开发视图：侧重于软件的模块组织和管理（最好采用4-6层子系统）。</div><div style="font-size: 18px;">进程视图：进程视图侧重于系统的运行特性，主要关注一些非功能性的需求。</div><div style="font-size: 18px;">物理视图：物理视图主要考虑如何把软件映射到硬件上，它通常要考虑到系统性能、规模、可靠性等。解决系统拓扑结构、系统安装、通讯等问题。</div><div style="font-size: 18px;">场景：场景可以看作是那些重要系统活动的抽象，它使四个视图有机联系起来，从某种意义上说场景是最重要的需求抽象。</div><div style="font-size: 18px;"><br></div><div style="font-size: 18px;">经典体系结构风格：</div><div style=""><div style="font-size: 18px;">数据流风格：批处理序列；管道/过滤器。</div><div style=""><div style="">优点:</div><div style="">1)&nbsp; &nbsp; &nbsp; &nbsp;使得软构件具有良好的隐蔽性和高内聚．低耦合的特点</div><div style="">2)&nbsp; &nbsp; &nbsp; &nbsp;支持软件重用。</div><div style="">3)&nbsp; &nbsp; &nbsp; &nbsp;系统维护和性能增强简单</div><div style="">4)&nbsp; &nbsp; &nbsp; &nbsp;支持并行执行</div><div style="">5)&nbsp; &nbsp; &nbsp; &nbsp;方便系统分析</div><div style="">l&nbsp; 缺点：</div><div style="">1)&nbsp; &nbsp; &nbsp; &nbsp;通过长的管道时会导致延迟的增加</div><div style="">2)&nbsp; &nbsp; &nbsp; &nbsp;通常导致进程成为批处理的结构。</div><div style="">3)&nbsp; &nbsp; &nbsp; &nbsp;不适合处理交互的应用。</div><div style="">4)&nbsp; &nbsp; &nbsp; &nbsp;因为在数据传输上没有通用的标准，增加了编写过滤器的复杂性。</div><div style="">5)&nbsp; &nbsp; &nbsp; &nbsp;在维护或响应两个分离但相关的数据流时，利用管道/过滤器方式不易。</div></div><div style="font-size: 18px;"><br></div><div style="font-size: 18px;">调用/返回风格：主程序/子程序；面向对象风格；层次结构。</div><div style=""><div style="">l&nbsp; 优点:</div><div style="">1)&nbsp; &nbsp; &nbsp; 因为对象对其他对象隐藏它的表示．所以可以改变一个对象的表示．而不影响其他的对象。</div><div style="">2)&nbsp; &nbsp; &nbsp; &nbsp;设计者可将一些数据存取操作的问题分解成一些交互的代理程序的集合;</div><div style="">l&nbsp; 缺点</div><div style="">1)&nbsp; &nbsp; &nbsp; &nbsp;为了使一个对象和另一个对象通过过程调用等进行交互，必须知道对象的标识。</div><div style="">2)&nbsp; &nbsp; &nbsp; &nbsp;只要一个对象的标识改变了．就必须修改所有其他明确调用它的对象,并消除由此带来的一些副作用</div><div style="">3)&nbsp; &nbsp; &nbsp; &nbsp;不同对象的操作关联性弱.<span style="text-indent: 2em;">面向对象是现在编程最流行的方式,基本上是无所不对象.但这也不能说明其它风格就不好,因为现在很难找到一个程序只包含有一种架构风格.</span></div></div><div style="font-size: 18px;"><span style="text-indent: 2em;"><br></span></div><div style="font-size: 18px;"><span style="text-indent: 2em;">独立构件风格：进程通讯；事件系统。</span><br></div><div style=""><span style="text-indent: 2em;"><div style="">1)&nbsp; &nbsp; &nbsp; &nbsp;为软件重用提供了强大的支持。</div><div style="">2)&nbsp; &nbsp; &nbsp; &nbsp;为改进系统带来了方便。</div><div style="">3)&nbsp; &nbsp; &nbsp; &nbsp;易于系统升级</div><div style="">主要缺点：</div><div style="">1)&nbsp; &nbsp; &nbsp; &nbsp;件放弃了对系统计算的控制。。</div><div style="">2)&nbsp; &nbsp; &nbsp; &nbsp;全局性能和资源管理存在问题。</div><div style="">3)&nbsp; &nbsp; &nbsp; &nbsp;既然过程的语义必须依赖于被触发事件的上下文约束，关于正确性的推理存在问题</div></span></div><div style="font-size: 18px;"><span style="text-indent: 2em;"><br></span></div><div style="font-size: 18px;"><span style="text-indent: 2em;"><br></span></div><div style="font-size: 18px;"><span style="text-indent: 2em;">虚拟机风格：解释器；基于规则的系统。</span><br></div><div style=""><span style="text-indent: 2em;"><div style="">优点：具有解释器风格的软件中含有一个虚拟机，可以仿真硬件的执行过程和一些关键应用；解释器通常被用来建立一种虚拟机以祢合程序语义与硬件语义之间的差异</div><div style="">缺点：其缺点是执行效率较低</div></span></div><div style="font-size: 18px;"><span style="text-indent: 2em;"><br></span></div><div style="font-size: 18px;"><span style="text-indent: 2em;">仓库风格：数据库系统；超文本系统；黑板系统。</span><br></div></div><div style="font-size: 18px;"><br></div><div style="font-size: 18px;">选择题;</div><div style="font-size: 18px;">软件工程、项目管理（9），软件体系结构（6）；</div><div style="font-size: 18px;">填空;</div><div style="font-size: 18px;">软件生命周期，</div><div style="font-size: 18px;">建模类型。</div><div style="font-size: 18px;">风格优点，</div><div style="font-size: 18px;">uml图的应用场景。</div>
	</div>    
                